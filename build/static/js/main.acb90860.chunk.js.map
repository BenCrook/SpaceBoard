{"version":3,"sources":["components/comment/new-comment.module.css","components/comment/comments.module.css","components/app/app-animations.module.css","components/app/app.module.css","components/comment/comment-animations.module.css","utilities/getWeekNumber.tsx","components/comment/NewComment.tsx","utilities/urls.ts","components/comment/Comments.tsx","components/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","container","textarea","submit","comment","commentThemed","enter","exitActive","enterActive","exit","enterDone","app","appDarkMode","containerFullWidth","header","teamName","column","name","colorPreview","getWeekNumber","d","Date","UTC","getFullYear","getMonth","getDate","setUTCDate","getUTCDate","getUTCDay","yearStart","getUTCFullYear","Math","ceil","getTime","NewComment","props","_useState","useState","_useState2","Object","slicedToArray","setComment","react_default","a","createElement","Fragment","onSubmit","event","preventDefault","Axios","post","concat","commentType","then","response","updateTeamData","data","catch","error","console","log","className","css","placeholder","onChange","target","value","type","Comments","isDarkMode","TransitionGroup","component","comments","map","CSSTransition","key","timeout","classNames","objectSpread","commentAnimations","commentTypes","emptyTeamData","good","bad","actions","App","team","_useState3","_useState4","teamData","_useState5","_useState6","shouldRender","setShouldRender","_useState7","_useState8","fullWidthMode","setFullWidthMode","_useState9","_useState10","darkMode","setDarkMode","_useState11","getCurrentWeekNumber","_useState12","weekNumber","setWeekNumber","useEffect","url","get","headers","Cache-Control","hasOwnProperty","widthBasedStyling","fontSize","theme","width","style","onClick","in","appAnimations","NewComment_NewComment","Comments_Comments","Boolean","window","location","hostname","match","ReactDOM","render","app_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,UAAA,+BAAAC,SAAA,8BAAAC,OAAA,iDCAlBJ,EAAAC,QAAA,CAAkBC,UAAA,4BAAAG,QAAA,0BAAAC,cAAA,qDCAlBN,EAAAC,QAAA,CAAkBC,UAAA,kCAAAK,MAAA,8BAAAC,WAAA,mCAAAC,YAAA,oCAAAC,KAAA,6BAAAC,UAAA,sDCAlBX,EAAAC,QAAA,CAAkBW,IAAA,iBAAAC,YAAA,yBAAAX,UAAA,uBAAAY,mBAAA,gCAAAC,OAAA,oBAAAC,SAAA,sBAAAC,OAAA,oBAAAC,KAAA,kBAAAC,aAAA,+CCAlBnB,EAAAC,QAAA,CAAkBM,MAAA,kCAAAC,WAAA,uCAAAC,YAAA,wCAAAC,KAAA,iCAAAC,UAAA,0QC2BHS,EAZO,SAACC,IAEnBA,EAAI,IAAIC,KAAKA,KAAKC,IAAIF,EAAEG,cAAeH,EAAEI,WAAYJ,EAAEK,aAGrDC,WAAWN,EAAEO,aAAe,GAAKP,EAAEQ,aAAe,IAEpD,IAAMC,EAAkB,IAAIR,KAAKA,KAAKC,IAAIF,EAAEU,iBAAkB,EAAG,IAEjE,OAAOC,KAAKC,OAAQZ,EAAEa,UAAYJ,EAAUI,WAAa,MAAY,GAAK,qBCdjEC,EAAuD,SAACC,GAA0B,IAAAC,EAC3DC,mBAAS,IADkDC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnFhC,EADmFkC,EAAA,GAC1EG,EAD0EH,EAAA,GAuB3F,OACII,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAA,QAAME,SAnBW,SAACC,GACtBA,EAAMC,iBAENC,IAAMC,KAAK,GAAAC,OCbA,UDaA,wBAAqChB,EAAMiB,YAAc,SAAWhD,GAC1EiD,KAAK,SAAUC,GACZnB,EAAMoB,eAAeD,EAASE,MAC9Bf,EAAW,MAEdgB,MAAM,SAAUC,GACbC,QAAQC,IAAIF,MAUkBG,UAAWC,IAAI7D,WAC7CyC,EAAAC,EAAAC,cAAA,YAAUmB,YAAY,wBAAwBC,SAPrC,SAACjB,GAClBN,EAAWM,EAAMkB,OAAOC,QAMsDL,UAAWC,IAAI5D,SAAUgE,MAAO9D,IACtGsC,EAAAC,EAAAC,cAAA,UAAQuB,KAAK,SAASN,UAAS,GAAAV,OAAKW,IAAI3D,OAAT,iBAAAgD,OAA+BhB,EAAMiB,cAApE,4DE1BHgB,EAAqD,SAACjC,GAC/D,IAAM9B,EAAgB8B,EAAMkC,WAAaP,IAAIzD,cAAgB,GAC7D,OACIqC,EAAAC,EAAAC,cAAA,OAAKiB,UAAS,GAAAV,OAAKW,IAAI7D,YACfyC,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAiBC,UAAW,MAGpBpC,EAAMqC,SAASC,IAAI,SAACrE,GAAD,OACXsC,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAeC,IAAKvE,EAASwE,QAAS,IAAKC,WAAUtC,OAAAuC,EAAA,EAAAvC,CAAA,GAAMwC,MACvDrC,EAAAC,EAAAC,cAAA,OAAKiB,UAAS,GAAAV,OAAKW,IAAI1D,QAAT,KAAA+C,OAAoB9C,IAC7BD,0CCVnC4E,EAAyB,CAAC,OAAQ,MAAO,WAEzCC,EAAkC,CACpCC,KAAM,CAAC,IACPC,IAAK,CAAC,IACNC,QAAS,CAAC,KA2ECC,EAxEuB,WAAM,IAAAjD,EAEvBC,mBAAe,OAAxBiD,EAFgC/C,OAAAC,EAAA,EAAAD,CAAAH,EAAA,MAAAmD,EAGHlD,mBAA2B4C,GAHxBO,EAAAjD,OAAAC,EAAA,EAAAD,CAAAgD,EAAA,GAGhCE,EAHgCD,EAAA,GAGtBjC,EAHsBiC,EAAA,GAAAE,EAIErD,oBAAkB,GAJpBsD,EAAApD,OAAAC,EAAA,EAAAD,CAAAmD,EAAA,GAIhCE,EAJgCD,EAAA,GAIlBE,EAJkBF,EAAA,GAAAG,EAKIzD,oBAAkB,GALtB0D,EAAAxD,OAAAC,EAAA,EAAAD,CAAAuD,EAAA,GAKhCE,EALgCD,EAAA,GAKjBE,EALiBF,EAAA,GAAAG,EAMN7D,oBAAmB,GANb8D,EAAA5D,OAAAC,EAAA,EAAAD,CAAA2D,EAAA,GAMhCE,EANgCD,EAAA,GAMtBE,EANsBF,EAAA,GAAAG,EAOFjE,mBAAiBkE,EAAqB,IAAIlF,OAPxCmF,EAAAjE,OAAAC,EAAA,EAAAD,CAAA+D,EAAA,GAOhCG,EAPgCD,EAAA,GAOpBE,EAPoBF,EAAA,GAWxCG,oBAAU,WACN,IAAMC,EAAG,GAAAzD,OFzBE,UEyBF,UAAAA,OAAwBmC,EAAxB,SAAAnC,OAAoCsD,EAApC,SAETxD,IAAM4D,IAAID,EAAK,CACXE,QAAS,CACLC,gBAAiB,cAGpB1D,KAAK,SAACC,GAICA,EAAS0D,eAAe,SAAoC,kBAAlB1D,EAASE,MACnDD,EAAeD,EAASE,MAG5BqC,GAAgB,MAEzB,CAACP,EAAMmB,IAEV,IAAMQ,EAAoB,CACtBC,SAAUlB,EAAgB,OAAS,QAEjCmB,EAAQf,EAAWtC,IAAIlD,YAAc,GACrCwG,EAAQpB,EAAgBlC,IAAIjD,mBAAqB,GAEvD,OACI6B,EAAAC,EAAAC,cAAA,OAAKyE,MAAOJ,EAAmBpD,UAAS,GAAAV,OAAKgE,EAAL,KAAAhE,OAAcW,IAAInD,MAEtD+B,EAAAC,EAAAC,cAAA,UAAQ0E,QAAS,kBAAMjB,GAAaD,KAApC,sBAEA1D,EAAAC,EAAAC,cAAA,OAAKiB,UAAWC,IAAIhD,QAChB4B,EAAAC,EAAAC,cAAA,mCAA0BF,EAAAC,EAAAC,cAAA,QAAMiB,UAAWC,IAAI/C,UAAWuE,GAA1D,SACA5C,EAAAC,EAAAC,cAAA,wGACAF,EAAAC,EAAAC,cAAA,UAAQ0E,QAAS,kBAAMrB,GAAkBD,KAAzC,0BAEAtD,EAAAC,EAAAC,cAAA,oCAA4B6D,GAC5B/D,EAAAC,EAAAC,cAAA,UAAQ0E,QAAS,kBAAMZ,EAAcD,EAAa,KAAlD,iBACCA,EAAaF,EAAqB,IAAIlF,MAAUqB,EAAAC,EAAAC,cAAA,UAAQ0E,QAAS,kBAAMZ,EAAcD,EAAa,KAAlD,aAA2E,MAGhI/D,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAe6C,GAAI3B,EAAchB,QAAS,IAAKC,WAAUtC,OAAAuC,EAAA,EAAAvC,CAAA,GAAMiF,MAC3D9E,EAAAC,EAAAC,cAAA,OAAKiB,UAAW2D,IAAcvH,WAC1ByC,EAAAC,EAAAC,cAAA,OAAKiB,UAAS,GAAAV,OAAKW,IAAI7D,UAAT,KAAAkD,OAAsBiE,IAC/BpC,EAAaP,IAAI,SAAArB,GAAW,OACzBV,EAAAC,EAAAC,cAAA,OAAKiB,UAAS,GAAAV,OAAKW,IAAI9C,QAAU2D,IAAKvB,GAClCV,EAAAC,EAAAC,cAAA,OAAKiB,UAAS,GAAAV,OAAKW,IAAI7C,OACnByB,EAAAC,EAAAC,cAAA,QAAMiB,UAAS,GAAAV,OAAKW,IAAI5C,aAAT,iBAAAiC,OAAqCC,KACnDA,GAELV,EAAAC,EAAAC,cAAC6E,EAAD,CAAYrE,YAAaA,EAAaG,eAAgBA,IACtDb,EAAAC,EAAAC,cAAC8E,EAAD,CAAUtE,YAAaA,EAAaoB,SAAUiB,EAASrC,GAAciB,WAAY+B,YCtE7FuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,mFCTNC,IAASC,OAAOvF,EAAAC,EAAAC,cAACsF,EAAD,MAASC,SAASC,eAAe,SDgI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlF,KAAK,SAAAmF,GACjCA,EAAaC","file":"static/js/main.acb90860.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"new-comment_container__2xiko\",\"textarea\":\"new-comment_textarea__1ZFno\",\"submit\":\"new-comment_submit__1VPBK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"comments_container__2cBZA\",\"comment\":\"comments_comment__pHc4d\",\"commentThemed\":\"comments_commentThemed__y3aUR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app-animations_container__1dMsm\",\"enter\":\"app-animations_enter__3_Krs\",\"exitActive\":\"app-animations_exitActive__2WTgj\",\"enterActive\":\"app-animations_enterActive__3wHPn\",\"exit\":\"app-animations_exit__GE5sZ\",\"enterDone\":\"app-animations_enterDone__2aAvw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__M9MMq\",\"appDarkMode\":\"app_appDarkMode__3Vdq4\",\"container\":\"app_container__2GidD\",\"containerFullWidth\":\"app_containerFullWidth__2x0LS\",\"header\":\"app_header__3NHfP\",\"teamName\":\"app_teamName__LIPfX\",\"column\":\"app_column__3YQxy\",\"name\":\"app_name__3MUxN\",\"colorPreview\":\"app_colorPreview__3KZQ-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"comment-animations_enter__7pdsf\",\"exitActive\":\"comment-animations_exitActive__2zZic\",\"enterActive\":\"comment-animations_enterActive__3F100\",\"exit\":\"comment-animations_exit__3C5h6\",\"enterDone\":\"comment-animations_enterDone__1l8y_\"};","/* For a given date, get the ISO week number\n *\n * Based on information at:\n *\n *    http://www.merlyn.demon.co.uk/weekcalc.htm#WNR\n *\n * Algorithm is to find nearest thursday, it's year\n * is the year of the week number. Then get weeks\n * between that date and the first day of that year.\n *\n * Note that dates in one year can be weeks of previous\n * or next year, overlap is up to 3 days.\n *\n * e.g. 2014/12/29 is Monday in week  1 of 2015\n *      2012/1/1   is Sunday in week 52 of 2011\n */\nconst getWeekNumber = (d: Date) : number => {\n    // Copy date so don't modify original\n    d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));\n    // Set to nearest Thursday: current date + 4 - current day number\n    // Make Sunday's day number 7\n    d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay() || 7));\n    // Get first day of year\n    const yearStart: Date = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));\n    // Calculate full weeks to nearest Thursday and return\n    return Math.ceil((((d.getTime() - yearStart.getTime()) / 86400000) + 1) / 7);\n};\n\nexport default getWeekNumber;","import { InterfaceTeamData } from '../../types/data';\nimport React, { useState } from 'react';\nimport Axios from 'axios';\nimport css from './new-comment.module.css';\nimport { baseUrl } from '../../utilities/urls';\n\ninterface InterfaceProps {\n    commentType: string,\n    updateTeamData: Function\n}\n\nexport const NewComment : React.FunctionComponent<InterfaceProps> = (props: InterfaceProps) => {\n    const [ comment, setComment ] = useState('');\n\n    /**\n     * @param {React.FormEvent<HTMLFormElement>} event\n     */\n    const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n\n        Axios.post(`${baseUrl()}new.php?commentType=` + props.commentType + '&text=' + comment)\n            .then(function (response: InterfaceTeamData) {\n                props.updateTeamData(response.data);\n                setComment(''); // Reset the comment\n            })\n            .catch(function (error: Object) {\n                console.log(error);\n            });\n    };\n\n    const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>): void => {\n        setComment(event.target.value);\n    };\n\n    return (\n        <>\n            <form onSubmit={handleFormSubmit} className={css.container}>\n                <textarea placeholder=\"Add your comment here\" onChange={handleChange} className={css.textarea} value={comment}/>\n                <button type=\"submit\" className={`${css.submit} background--${props.commentType}`}>Add</button>\n            </form>\n        </>\n    )\n};","/**\n * Returns the root driectory of Retro\n */\nexport const baseUrl = () : string => {\n    const mode = process.env.NODE_ENV;\n    switch (mode) {\n        case 'production': {\n            return '/retro/';\n        }\n        case 'development': {\n            return './'\n        }\n        default: {\n            return '/'\n        }\n    }\n};\n","import { DarkMode } from '../../types/data';\nimport React from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport css from './comments.module.css';\nimport commentAnimations from './comment-animations.module.css';\n\ninterface InterfaceProps {\n    comments: string[],\n    commentType: string,\n    isDarkMode: DarkMode\n}\n\nexport const Comments : React.FunctionComponent<InterfaceProps> = (props: InterfaceProps) => {\n    const commentThemed = props.isDarkMode ? css.commentThemed : '';\n    return (\n        <div className={`${css.container}`}>\n                <TransitionGroup component={null}>\n                    {\n                        // todo: Use a unique ID as the key rather than the comment, using index breaks the animations?!\n                        props.comments.map((comment: string) => (\n                                <CSSTransition key={comment} timeout={200} classNames={{...commentAnimations}}>\n                                    <div className={`${css.comment} ${commentThemed}`}>\n                                        {comment}\n                                    </div>\n                                </CSSTransition>\n                            )\n                        )\n                    }\n                </TransitionGroup>\n        </div>\n    );\n};\n","import { DarkMode, InterfaceColumns, InterfaceTeamData, Team } from '../../types/data';\nimport React, { useState, useEffect } from 'react';\nimport Axios from 'axios';\nimport getCurrentWeekNumber from '../../utilities/getWeekNumber';\nimport { baseUrl } from '../../utilities/urls';\nimport { NewComment } from '../comment/NewComment';\nimport { Comments } from '../comment/Comments';\nimport css from './app.module.css';\nimport appAnimations from './app-animations.module.css';\nimport { CSSTransition } from 'react-transition-group';\n\n\nconst commentTypes: string[] = ['good', 'bad', 'actions'];\n\nconst emptyTeamData: InterfaceColumns = {\n    good: [''],\n    bad: [''],\n    actions: ['']\n};\n\nconst App : React.FunctionComponent = () => {\n    // todo: Include a landing page so the team can be chosen (if Black/Yellow will use this?)\n    const [ team ] = useState<Team>('red');\n    const [ teamData, updateTeamData ] = useState<InterfaceColumns>(emptyTeamData);\n    const [ shouldRender, setShouldRender ] = useState<boolean>(false);\n    const [ fullWidthMode, setFullWidthMode ] = useState<boolean>(false);\n    const [ darkMode, setDarkMode ] = useState<DarkMode>(false); // todo: Use context rather than thread props\n    const [ weekNumber, setWeekNumber ] = useState<number>(getCurrentWeekNumber(new Date()));\n\n    // This is resonsible for updating the component state once when the component is mounted.\n    // The empty array as a second argument means never update (no dependencies)\n    useEffect(() => {\n        const url = `${baseUrl()}teams/${team}/week${weekNumber}.json`;\n\n        Axios.get(url, {\n            headers: {\n                'Cache-Control': 'no-cache'\n            }\n        })\n            .then((response: InterfaceTeamData) => {\n                // If the file doesn't exist the backend will create it then return HTML,\n                // because that HTML is a string it's safe to assume the data is incorrect\n                // if the response data is not an object\n                if (response.hasOwnProperty('data') && typeof response.data === 'object') {\n                    updateTeamData(response.data);\n                }\n\n                setShouldRender(true);\n            });\n    }, [team, weekNumber]); // Only re-run when team state changes\n\n    const widthBasedStyling = {\n        fontSize: fullWidthMode ? '20px' : '16px'\n    };\n    const theme = darkMode ? css.appDarkMode : '';\n    const width = fullWidthMode ? css.containerFullWidth : '';\n\n    return (\n        <div style={widthBasedStyling} className={`${theme} ${css.app}`}>\n\n            <button onClick={() => setDarkMode(!darkMode)}>Toggle Theme (WIP)</button>\n\n            <div className={css.header}>\n                <h1>Space48 Retro Board - <span className={css.teamName}>{team}</span> team</h1>\n                <p>Click the button below to toggle full-width mode, this may be useful for displaying on TVs.</p>\n                <button onClick={() => setFullWidthMode(!fullWidthMode)}>Toggle Full Width Mode</button>\n\n                <h2>Currently Viewing week {weekNumber}</h2>\n                <button onClick={() => setWeekNumber(weekNumber - 1)}>Previous Week</button>\n                {weekNumber < getCurrentWeekNumber(new Date()) ? <button onClick={() => setWeekNumber(weekNumber + 1)}>Next Week</button> : null }\n            </div>\n\n            <CSSTransition in={shouldRender} timeout={200} classNames={{...appAnimations}}>\n                <div className={appAnimations.container}>\n                    <div className={`${css.container} ${width}`}>\n                        {commentTypes.map(commentType => (\n                            <div className={`${css.column}`} key={commentType}>\n                                <div className={`${css.name}`}>\n                                    <span className={`${css.colorPreview} background--${commentType}`} />\n                                    {commentType}\n                                </div>\n                                <NewComment commentType={commentType} updateTeamData={updateTeamData}/>\n                                <Comments commentType={commentType} comments={teamData[commentType]} isDarkMode={darkMode}/>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </CSSTransition>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport './global-css/normalize.css';\nimport './global-css/variables.css';\nimport './global-css/helpers/colors.css';\nimport './global-css/global.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}